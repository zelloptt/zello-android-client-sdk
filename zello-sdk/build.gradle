buildscript {
	ext.kotlin_version = "1.9.10"

	repositories {
		google()
		mavenCentral()
	}

	dependencies {
		classpath "com.android.tools.build:gradle:8.1.1"
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
	}
}

repositories {
	google()
	mavenCentral()
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

java {
	toolchain {
		languageVersion.set(JavaLanguageVersion.of(17))
	}
}

kotlin {
	jvmToolchain(17)
}

dependencies {
	implementation "androidx.core:core-ktx:1.10.1"
	implementation "androidx.media:media:1.6.0"
	implementation "androidx.annotation:annotation:1.6.0"
}

def sourceAarName = "zello-sdk-release.aar"
def targetAarName = "zello-sdk.aar"
def sourceAarPath = "build/outputs/aar/${sourceAarName}"

tasks.register("zelloSdkAarDeployReleaseToRoot") {
	description "Copies SDK AAR to the root folder of the project"
	delete {
		"../${targetAarName}"
	}
	copy {
		from "${sourceAarPath}"
		into "../"
		rename("${sourceAarName}", "${targetAarName}")
	}
	shouldRunAfter "assembleRelease"
}

// This add a task that deploys a release build of the library to the sample projects /lib folders.
tasks.register("zelloSdkAarDeployReleaseToSamples") {
	description "Copies SDK AAR to all sample projects"
	delete {
		"../zello-sdk-sample/libs/${targetAarName}"
	}
	copy {
		from "${sourceAarPath}"
		into "../zello-sdk-sample/libs/"
		rename("${sourceAarName}", "${targetAarName}")
	}
	delete {
		"../zello-sdk-sample-contacts/libs/${targetAarName}"
	}
	copy {
		from "${sourceAarPath}"
		into "../zello-sdk-sample-contacts/libs/"
		rename("${sourceAarName}", "${targetAarName}")
	}
	delete {
		"../zello-sdk-sample-misc/libs/${targetAarName}"
	}
	copy {
		from "${sourceAarPath}"
		into "../zello-sdk-sample-misc/libs/"
		rename("${sourceAarName}", "${targetAarName}")
	}
	delete {
		"../zello-sdk-sample-ptt/libs/${targetAarName}"
	}
	copy {
		from "${sourceAarPath}"
		into "../zello-sdk-sample-ptt/libs/"
		rename("${sourceAarName}", "${targetAarName}")
	}
	delete {
		"../zello-sdk-sample-signin/libs/${targetAarName}"
	}
	copy {
		from "${sourceAarPath}"
		into "../zello-sdk-sample-signin/libs/"
		rename("${sourceAarName}", "${targetAarName}")
	}
	shouldRunAfter "assembleRelease"
}

tasks.register("zelloSdkDocDelete", Delete) {
	description "Deletes Zello SDK Javadoc from the project root folder"
	delete "../docs/zello-sdk-documentation"
}

android.libraryVariants.configureEach { variant ->
	if (variant.name == "release") {
		tasks.register("zelloSdkDocCreate", Javadoc) {
			title ""
			description "Creates Zello SDK Javadoc in the project root folder"
			destinationDir = new File("${projectDir}/../docs", "zello-sdk-documentation")
			def javaCompile = variant.javaCompileProvider.get()
			source = javaCompile.source
			classpath = javaCompile.classpath + files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
			options.memberLevel = JavadocMemberLevel.PUBLIC
			exclude "**/Constants.java"
			exclude "**/BuildConfig.java"
			exclude "**/*.kt"
			options.noTree = false
			options.noNavBar = false
			options.noIndex = false
			options.splitIndex = false
			options.use = false
			options.version = false
			options.author = false
			options.noDeprecated = true
			options.noDeprecatedList = true
			options.stylesheetFile = new File(projectDir, "../docs/stylesheet.css")
			shouldRunAfter "assembleRelease"
			dependsOn "zelloSdkDocDelete"
		}
	}
}

tasks.configureEach { task ->
	if (task.name == "assembleRelease") {
		task.finalizedBy "zelloSdkAarDeployReleaseToRoot"
		task.finalizedBy "zelloSdkAarDeployReleaseToSamples"
	}
}

android {
	compileSdk 34
	setBuildToolsVersion("33.0.1")
	namespace "com.zello.sdk"

	buildFeatures {
		buildConfig true
	}

	ext.sdkVersion = "5.33.3"

	defaultConfig {
		minSdk 23
		targetSdk 34
		manifestPlaceholders.sdkVersion = "$sdkVersion"
		buildConfigField "String", "SDK_VERSION", "\"$sdkVersion\""
		consumerProguardFiles "consumer-rules.pro"
	}

	sourceSets {
		debug.setRoot("build-types/debug")
		release.setRoot("build-types/release")
	}

	buildTypes {
		debug {
			minifyEnabled false
			proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
		}
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
		}
	}

	compileOptions {
		sourceCompatibility JavaVersion.VERSION_17
		targetCompatibility JavaVersion.VERSION_17
	}

	kotlinOptions {
		jvmTarget = "17"
	}
}
