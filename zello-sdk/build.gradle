buildscript {
    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.1'
    }
}

repositories {
    jcenter()
    google()
}

apply plugin: 'com.android.library'

dependencies {
    implementation fileTree(include: '*.jar', dir: 'libs')
}

task zelloSdkJarDeleteFromRoot(type: Delete) {
    description "Deletes SDK jar from the root folder of the project"
    delete '../zello-sdk.jar'
}

task zelloSdkJarDeployReleaseToRoot() {
    description "Copies a release build of the SDK jar to the root folder of the project"
    delete {
        delete '../zello-sdk.jar'
    }
    copy {
        from "build/intermediates/packaged-classes/release/classes.jar"
        into '../'
        rename('classes.jar', 'zello-sdk.jar')
    }
}

task zelloSdkJarDeleteFromSamples(type: Delete) {
    description "Deletes SDK jars from all sample projects"
    delete '../zello-sdk-sample/libs/zello-sdk.jar', '../zello-sdk-sample-contacts/libs/zello-sdk.jar', '../zello-sdk-sample-misc/libs/zello-sdk.jar', '../zello-sdk-sample-ptt/libs/zello-sdk.jar', '../zello-sdk-sample-signin/libs/zello-sdk.jar'
}

// This add a task that deploys a release build of the library to the sample projects /lib folders.
android.libraryVariants.all { variant ->
    if (variant.name.equals('release')) {
        task("zelloSdkJarDeploy${variant.name.capitalize()}ToSamples") {
            description "Copies a ${variant.name} build of the SDK jar to all sample projects"
            delete {
                delete '../zello-sdk-sample/libs/zello-sdk.jar'
            }
            delete {
                delete '../zello-sdk-sample-contacts/libs/zello-sdk.jar'
            }
            delete {
                delete '../zello-sdk-sample-misc/libs/zello-sdk.jar'
            }
            delete {
                delete '../zello-sdk-sample-ptt/libs/zello-sdk.jar'
            }
            delete {
                delete '../zello-sdk-sample-signin/libs/zello-sdk.jar'
            }
            copy {
                from "build/intermediates/packaged-classes/${variant.name}/classes.jar"
                into '../zello-sdk-sample/libs'
                rename('classes.jar', 'zello-sdk.jar')
            }
            copy {
                from "build/intermediates/packaged-classes/${variant.name}/classes.jar"
                into '../zello-sdk-sample-contacts/libs'
                rename('classes.jar', 'zello-sdk.jar')
            }
            copy {
                from "build/intermediates/packaged-classes/${variant.name}/classes.jar"
                into '../zello-sdk-sample-misc/libs'
                rename('classes.jar', 'zello-sdk.jar')
            }
            copy {
                from "build/intermediates/packaged-classes/${variant.name}/classes.jar"
                into '../zello-sdk-sample-ptt/libs'
                rename('classes.jar', 'zello-sdk.jar')
            }
            copy {
                from "build/intermediates/packaged-classes/${variant.name}/classes.jar"
                into '../zello-sdk-sample-signin/libs'
                rename('classes.jar', 'zello-sdk.jar')
            }
        }
    }
}

task zelloSdkDocDelete(type: Delete) {
    description "Deletes Zello SDK Javadoc from the project root folder"
    delete '../docs/zello-sdk-documentation'
}

android.libraryVariants.all { variant ->
    if (variant.name.equals('release')) {
        task("zelloSdkDocCreate", type: Javadoc, dependsOn: "zelloSdkDocDelete") {
            title ""
            description "Creates Zello SDK Javadoc in the project root folder"
            destinationDir = new File("${project.getProjectDir()}/../docs", "zello-sdk-documentation")
            source = android.sourceSets.main.java.srcDirs
            classpath = files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
            exclude '**/Constants.java'
            exclude '**/ContactObserver*.java'
            options.memberLevel = JavadocMemberLevel.PUBLIC
            options.noTree = false
            options.noNavBar = false
            options.noIndex = false
            options.splitIndex = false
            options.use = false
            options.version = false
            options.author = false
            options.noDeprecated = true
            options.noDeprecatedList = true
            options.stylesheetFile = new File(projectDir, "../docs/stylesheet.css")
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.finalizedBy 'zelloSdkDocCreate'
        task.finalizedBy 'zelloSdkJarDeployReleaseToRoot'
        task.finalizedBy 'zelloSdkJarDeployReleaseToSamples'
    }
    if (task.name == 'assembleDebug') {
        task.finalizedBy 'zelloSdkJarDeployDebugToSamples'
    }
}

android {
    compileSdkVersion 27

    defaultConfig {
        targetSdkVersion 27
        minSdkVersion 15
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            //resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        //instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
}
